import logging
import os

from telegram.ext import(
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)

from config import config
from knowledge_base import KnowledgeBase
from yandex_gpt import yandex_gpt
from utils import check_message_limit, is_on_topic

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ,
    level=logging.INFO
)
logger = logging.getLogger(__name__)

SELECTING_ACTION , GIVING_FEEDBACK , ADDING_QUESTION = range(3)


class BotHandlers:
    def __init__ (self , knowledge_base: KnowledgeBase):
        self.knowledge_base = knowledge_base

    async def start(self, update):
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–Ω–ª–∞–π–Ω-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
            "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º:\n"
            "- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–Ω–ª–∞–π–Ω-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
            "- –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            "- –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑ —Å –ø–æ–º–æ—â—å—é NLP\n"
            "- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–∫–∏—Ö —Å–∏—Å—Ç–µ–º\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )

    async def help_command(self, update):
        help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
/add_question - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

–Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–Ω–ª–∞–π–Ω-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""
        await update.message.reply_text(help_text)

    async def handle_message(self, update):
        user_id = update.effective_user.id

        if not check_message_limit(user_id):
            await update.message.reply_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {config.MESSAGE_LIMIT_SECONDS} —Å–µ–∫—É–Ω–¥.")
            return

        user_question = update.message.text
        logger.info(f"User {user_id} asked: {user_question}")

        if not is_on_topic(user_question):
            await update.message.reply_text("–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
            return

        answer, ratio = self.knowledge_base.find_answer(user_question)

        if answer and ratio > config.SIMILARITY_THRESHOLD:
            await update.message.reply_text(answer)
        else:
            await update.message.reply_text("–ò—â—É –æ—Ç–≤–µ—Ç...")
            yandex_response = yandex_gpt.ask(user_question)

            if yandex_response:
                await update.message.reply_text(yandex_response)
                self.knowledge_base.add_question_answer(user_question, yandex_response)
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")

    async def feedback_handler(self, update):
        query = update.callback_query
        await query.answer()

        data_parts = query.data.split('_')
        feedback_type = data_parts[1]
        # answer_snippet = data_parts[2] if len(data_parts) > 2 else ""
        user_id = query.from_user.id

        logger.info(f"Feedback from {user_id}: {feedback_type}")
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")

    async def save_question_handler(self, update, context):
        query = update.callback_query
        await query.answer()

        if query.data == 'dont_save':
            await query.edit_message_text("–•–æ—Ä–æ—à–æ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
            return

        data_parts = query.data.split('_')
        if len(data_parts) < 3:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        question = '_'.join(data_parts[1:-1])
        full_answer = query.message.reply_to_message.text

        self.knowledge_base.add_question_answer(question , full_answer)
        await query.edit_message_text("–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        context.user_data.pop('last_question' , None)
        context.user_data.pop('last_answer' , None)

    async def feedback_command(self, update):
        user_id = update.effective_user.id

        if not check_message_limit(user_id):
            await update.message.reply_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {config.MESSAGE_LIMIT_SECONDS} —Å–µ–∫—É–Ω–¥.")
            return ConversationHandler.END

        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
        return GIVING_FEEDBACK

    async def receive_feedback(self, update):
        feedback = update.message.text
        user_id = update.effective_user.id

        logger.info(f"Feedback from {user_id}: {feedback}")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
        return ConversationHandler.END

    async def add_question_command(self, update):
        user_id = update.effective_user.id

        if not check_message_limit(user_id):
            await update.message.reply_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {config.MESSAGE_LIMIT_SECONDS} —Å–µ–∫—É–Ω–¥.")
            return ConversationHandler.END

        if user_id not in config.ADMIN_IDS:
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return ConversationHandler.END

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ '|'.\n"
            "–ü—Ä–∏–º–µ—Ä: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–∏–∑? | –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç NLP –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."
        )
        return ADDING_QUESTION

    async def receive_question_answer(self, update):
        user_id = update.effective_user.id
        text = update.message.text

        if not check_message_limit(user_id):
            await update.message.reply_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {config.MESSAGE_LIMIT_SECONDS} —Å–µ–∫—É–Ω–¥.")
            return ADDING_QUESTION

        if '|' not in text:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '|' –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.")
            return ADDING_QUESTION

        question, answer = [part.strip() for part in text.split('|' , 1)]
        self.knowledge_base.add_question_answer(question, answer)

        await update.message.reply_text(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}"
        )
        return ConversationHandler.END

    async def show_db(self, update):
        try:
            if not self.knowledge_base.base:
                await update.message.reply_text("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞")
                return

            message = ["–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:"]
            for answer , questions in self.knowledge_base.base.items():
                message.append(f"\n–û—Ç–≤–µ—Ç: {answer}")
                message.append(f"\n–í–æ–ø—Ä–æ—Å—ã: {', '.join(questions)}")

            full_message = "\n".join(message)
            await update.message.reply_text(full_message[:4000])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            await update.message.reply_text("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")

    async def cancel(self, update):
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    async def error_handler(self, update, context):
        logger.warning(f'Update {update} caused error {context.error}')


def main():
    if not os.path.exists(config.KNOWLEDGE_BASE_FILE):
        logger.info("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
        kb = KnowledgeBase(config.KNOWLEDGE_BASE_FILE)
        kb.save()

    knowledge_base = KnowledgeBase(config.KNOWLEDGE_BASE_FILE)
    bot_handlers = BotHandlers(knowledge_base)

    application = ApplicationBuilder().token(config.TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start" , bot_handlers.start))
    application.add_handler(CommandHandler("help" , bot_handlers.help_command))
    application.add_handler(CallbackQueryHandler(bot_handlers.feedback_handler , pattern='^feedback_'))
    application.add_handler(CallbackQueryHandler(bot_handlers.save_question_handler , pattern='^save_|dont_save'))

    feedback_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('feedback' , bot_handlers.feedback_command)] ,
        states={
            GIVING_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND , bot_handlers.receive_feedback)] ,
        } ,
        fallbacks=[CommandHandler('cancel' , bot_handlers.cancel)] ,
    )
    application.add_handler(feedback_conv_handler)

    add_question_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('add_question' , bot_handlers.add_question_command)] ,
        states={
            ADDING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND , bot_handlers.receive_question_answer)] ,
        } ,
        fallbacks=[CommandHandler('cancel' , bot_handlers.cancel)] ,
    )
    application.add_handler(add_question_conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND , bot_handlers.handle_message))
    application.add_handler(CommandHandler("show_db" , bot_handlers.show_db))
    application.add_error_handler(bot_handlers.error_handler)

    application.run_polling()

if __name__ == '__main__':
    main()
